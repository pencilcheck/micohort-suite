// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// below are models used by this application

model MailingList {
    id            String    @id @default(cuid())
    title         String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    persons       MailingListsOnPersons[]
}

model MicpaPerson {
    id                  String          @id @default(cuid())
    name                String
    email               String
    company             String
    address             String?
    mailingLists        MailingListsOnPersons[]
    linkedinPersons     MicpaLinkedinPerson[]
}

model MicpaLinkedinPerson {
    id                  String          @id @default(cuid())
    information         Json
    micpaPersonId       String
    micpaPerson         MicpaPerson     @relation(fields: [micpaPersonId], references: [id], onDelete: Cascade)
    createdAt           DateTime @default(now()) // use this field to determine the scraped date for a micpaPerson
}

model MailingListsOnPersons {
    mailingListId       String
    mailingList         MailingList     @relation(fields: [mailingListId], references: [id])
    personId            String
    person              MicpaPerson     @relation(fields: [personId], references: [id])
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([mailingListId, personId])
}