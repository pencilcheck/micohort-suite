// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
    previewFeatures = ["fullTextSearch", "fullTextIndex", "clientExtensions"]
}

generator zod {
  provider        = "zod-prisma-types"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    directUrl    = env("DIRECT_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Restrict)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// below are models used by this application

model MailingList {
    id            String    @id @default(cuid())
    title         String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    persons       MailingListsOnPersons[]

    @@index([id, title, createdAt, updatedAt])
}

model KeywordFilterDropdown {
    id            String    @id @default(cuid())
    label         String
    value         String
}

model PersonLicense {
    id                  String          @id @default(cuid())
    personId            String          @unique
    micpaPerson         MicpaPerson     @relation(fields: [personId], references: [id], onDelete: Restrict)
    laraStatus          String
    licenseDate         String


    @@index([id, laraStatus, licenseDate])
}

model MicpaPerson {
    id                  String          @id @default(cuid())
    name                String
    email               String
    company             String
    memberType          String          @default("")
    address             String?
    scrapedAt           DateTime? // it is likely we can't find the person on linkedin so we need a flag to tell us if we tried it or not

    mailingLists        MailingListsOnPersons[]
    linkedinPersons     MicpaLinkedinPerson[]
    orders              MicpaOrder[] // used for spending, might not correspond 1-1 to credit earned
    subscribeOrderDetails  MicpaOrderDetail[]
    educationUnits      MicpaEducationUnit[] // used for credit earning
    aggregatedEduUnits  MicpaAggregatedEducationUnit[]
    personLicense       PersonLicense?

    @@index([id])
    //@@fulltext([name, email, company])
}

model MicpaExportPerson {
    id                  String          @id @default(cuid())
    firstName           String
    lastName            String
    email               String
    prefEmail           Boolean         @default(false)
    company             String
    memberType          String          @default("")
    addressLine1        String?
    addressLine2        String?
    addressLine3        String?
    addressLine4        String?
    city                String?
    state               String?
    zip                 String?
    badgeName           String?

    @@index([id])
}

model MicpaOrder {
    id                  String            @id @default(cuid())
    orderDate           DateTime?
    status              String
    customerId          String? // not all customer id match MicpaPerson record, meaning "customer" will be empty even though this is not empty
    customer            MicpaPerson?      @relation(fields: [customerId], references: [id], onDelete: Restrict)
    orderDetails        MicpaOrderDetail[]
    educationUnits      MicpaEducationUnit[]

    @@index([customerId, orderDate])
}

// only CPE products, not cancelled, a parent product
model MicpaProduct {
    id                  String            @id @default(cuid())
    webName             String
    name                String
    code                String
    startAt             DateTime?
    subscriptionStartAt DateTime?
    productCategory     String
    orderDetails        MicpaOrderDetail[]
    educationUnits      MicpaEducationUnit[]

    //@@fulltext([webName, name, code])
}

model MicpaOrderDetail {
    id                  String            @id @default(cuid())
    productId           String? // some product id aren't in product table
    product             MicpaProduct?     @relation(fields: [productId], references: [id], onDelete: Restrict)
    orderId             String // person who paid for the order
    order               MicpaOrder        @relation(fields: [orderId], references: [id], onDelete: Restrict)
    subscriberId        String?  // person who benefit for the membership dues product (not necessarily the one paying it)
    subscriber          MicpaPerson?      @relation(fields: [subscriberId], references: [id], onDelete: Restrict)
    spending            Float?
}

model MicpaEducationUnit {
    id                  String            @id @default(cuid())
    isThirdParty        Boolean
    externalSource      String? // third party priority, but if empty, fill the associated product name, this column will be used for full text
    productId           String? // could be null if 3rd party
    product             MicpaProduct?     @relation(fields: [productId], references: [id], onDelete: Restrict)
    orderId             String? // can get person who ordered it, sometimes this is null
    order               MicpaOrder?       @relation(fields: [orderId], references: [id], onDelete: Restrict)
    personId            String?  // person who get the credits, if not filled it could be ignored
    person              MicpaPerson?      @relation(fields: [personId], references: [id], onDelete: Restrict)
    educationCategory   String
    creditEarned        Float?            @default(0)
    creditAt            DateTime?

    @@index([id, productId, orderId, personId, isThirdParty, creditAt])
    //@@fulltext([externalSource])
}

model MicpaAggregatedEducationUnit {
    id                  String            @id @default(cuid())
    personId            String
    person              MicpaPerson       @relation(fields: [personId], references: [id], onDelete: Restrict)
    isThirdParty        Boolean
    educationCategory   String
    creditEarned        Float?            @default(0)
    creditStartAt       DateTime?
    creditEndAt         DateTime?

    @@index([personId, isThirdParty, educationCategory, creditStartAt, creditEndAt])
}

model MicpaLinkedinPerson {
    id                  String          @id @default(cuid())
    scrapedAt           DateTime?
    information         Json
    micpaPersonId       String
    micpaPerson         MicpaPerson     @relation(fields: [micpaPersonId], references: [id], onDelete: Restrict)
    createdAt           DateTime        @default(now()) // use this field to determine the scraped date for a micpaPerson
}

model MailingListsOnPersons {
    // deleting mailing list will delete related records
    mailingListId       String
    mailingList         MailingList     @relation(fields: [mailingListId], references: [id], onDelete: Restrict)
    // deleting person will delete related records
    personId            String
    person              MicpaPerson     @relation(fields: [personId], references: [id], onDelete: Restrict)
    assignedAt          DateTime        @default(now())
    assignedBy          String?         // once we have user login then we can use this field

    @@id([mailingListId, personId])
}
